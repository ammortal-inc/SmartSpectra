// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: modules/messages/status.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Presage_Physiology_StatusCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ok // = 0
  case noFacesFound // = 1
  case moreThanOneFaceFound // = 2
  case faceNotCentered // = 3
  case faceTooBigOrTooSmall // = 4
  case imageTooDark // = 5
  case imageTooBright // = 6
  case chestTooFarOrNotEnoughShowing // = 7
  case processingNotStarted // = 8
  case unauthorized // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .noFacesFound
    case 2: self = .moreThanOneFaceFound
    case 3: self = .faceNotCentered
    case 4: self = .faceTooBigOrTooSmall
    case 5: self = .imageTooDark
    case 6: self = .imageTooBright
    case 7: self = .chestTooFarOrNotEnoughShowing
    case 8: self = .processingNotStarted
    case 9: self = .unauthorized
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .noFacesFound: return 1
    case .moreThanOneFaceFound: return 2
    case .faceNotCentered: return 3
    case .faceTooBigOrTooSmall: return 4
    case .imageTooDark: return 5
    case .imageTooBright: return 6
    case .chestTooFarOrNotEnoughShowing: return 7
    case .processingNotStarted: return 8
    case .unauthorized: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Presage_Physiology_StatusCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Presage_Physiology_StatusCode] = [
    .ok,
    .noFacesFound,
    .moreThanOneFaceFound,
    .faceNotCentered,
    .faceTooBigOrTooSmall,
    .imageTooDark,
    .imageTooBright,
    .chestTooFarOrNotEnoughShowing,
    .processingNotStarted,
    .unauthorized,
  ]
}

#endif  // swift(>=4.2)

public struct Presage_Physiology_StatusValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Presage_Physiology_StatusCode = .ok

  public var timestamp: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Presage_Physiology_StatusCode: @unchecked Sendable {}
extension Presage_Physiology_StatusValue: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "presage.physiology"

extension Presage_Physiology_StatusCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NO_FACES_FOUND"),
    2: .same(proto: "MORE_THAN_ONE_FACE_FOUND"),
    3: .same(proto: "FACE_NOT_CENTERED"),
    4: .same(proto: "FACE_TOO_BIG_OR_TOO_SMALL"),
    5: .same(proto: "IMAGE_TOO_DARK"),
    6: .same(proto: "IMAGE_TOO_BRIGHT"),
    7: .same(proto: "CHEST_TOO_FAR_OR_NOT_ENOUGH_SHOWING"),
    8: .same(proto: "PROCESSING_NOT_STARTED"),
    9: .same(proto: "UNAUTHORIZED"),
  ]
}

extension Presage_Physiology_StatusValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StatusValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .ok {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Presage_Physiology_StatusValue, rhs: Presage_Physiology_StatusValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
